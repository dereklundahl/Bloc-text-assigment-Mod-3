1. What are some pros and cons of using linked lists instead of arrays?

A: The main pro for a linked list over an array is the memory usage. Each node has a pointer to the next node which allows the node to be stored in any available memory location. Linked lists also alow for efficient insertion and deletion. The biggest disadvantage is that to locate a specific node you must first go through all of the previous ones, making it less efficient.

2. Come up with a real world example of a linked list.

A: One real world example of a linked list is the back button on a browser. If you use the back button, there is a pointer to the previous web site that was being accessed. 

Programming Questions

You may program the following questions in any language of your choice (JavaScript, Ruby, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

1. The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
WHILE there is a next node
 SET current.next to current node
END WHILE
 Set current.next to node
END IF
END FUNCTION

A: The first portion of the code works perfectly. When you create a node, you set the value to element and the node.next to null because there is no follow on node to point to. The begining of the if statement also works. If there is no head, you set the head to the node, meaning the head becomes the first node in the linked list. The else statement is also good. If the head does exist, you are still starting at the head because in a linked list, you always start at the head. You set the current node to the head to reference where you are in the linked list. After that section is where there is a bug. You want to set the current node to current.next while there is a .next, so I inserted a WHILE loop. When there is no longer a .next, meaning you are at the end of the list, then you set the current.next to node.

```
class LinkedList {
  
  constructor() {
    
    this.head = null;
  
  }

  

  insertNodeAtTail(val) {
    
    var node = {
      
      data: val,
      
      next: null
    
    };

    

  if (!this.head) {
      
    this.head = node;
    
  } else {
      
      var p1 = this.head;
      
      while (p1.next) {
        
        p1 = p1.next;
      
      }
      
      p1.next = node;
    
    }
  
  }

  

  deleteNode(val) {
    
  //If list is empty
    
  if (!this.head) {
      
    console.log('Linked list is empty.');
      
    return;
    
  }
    

  //if you are deleting the head
    
  if (this.head.data === val) {
      
    this.head = this.head.next;
    
  } else {
      
      var p1 = this.head;
      
      var p2 = p1.next;
      
      while (p2) {
        
        if (p2.data === val) {
          
          p1.next = p2.next;
          
          break;
        
        } else {
          
           p1 = p2;
         
          }
      
        }
    
     }
  
  }

}
```

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

```
LinkedList.prototype.removeDuplicates = function() {
  
  //Empty or a single element LinkedList
  
  if (!this.head || !this.head.next) {
    
    console.log('No duplicates were found. Empty or single item list');
        return;
  
  }

  
  
  var p1;
  
  var p2;
  
  var nodes = {};

  

  p1 = this.head;
  
  p2 = p1.next;
  
  nodes[p1.data] = true;

  

  while (p2) {
    
    var data = p2.data;
    
    if (nodes[data]) {
      
      p1.next = p2.next;
    
    } else {
        
        nodes[data] = true;
        
        p1 = p2;
   
      }
    
      p2 = p2.next;
   
  }

};
```

3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a

```
LinkedList.prototype.reverseLinkedList = function() {
  
  if (!this.head || !this.head.next) {
    
    console.log('Nothing to reverse');
    
    return;
  
  }

  
  var p1 = null;
  
  var p2 = this.head;
  
  var p3;

  

  while (p2) {
    
    p3 = p2.next;
    
    p2.next = p1;
    
    p1 = p2;
    
    p2 = p3;
  
  }
  
  this.head = p1

}

```