1. What is time complexity and what is its relation to algorithms?

A: Time complexity is the relationship between how long an algorithm takes to run versus how big the data set is. In other words time complexity is a theoretical time for how long an algorithm takes to run for different ammounts of information or data that it has to process.

2. What is runtime?

A: Runtime is the amount of time an algorithm takes to run although sometimes it is used synonomously with time complexity.

3. How is the runtime of an algorithm calculated?

A: If by runtime, time complexity is what is being refered to, it is calculated as a function of n, where n is the input size and f(n) is the rate that the runtime grows with the growth of the input size. 

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A: Most to least efficient:
- O(1): Constant growth rate. The size of the data set does not change the time complexity

-O(log n): Logarithmic growth rate. Runtime grows by 1 for every 2 of the input.

-O(n): Linear. Grows 1 for 1. Common with a single for loop.

-O(n log n): Log linear. Halves the data for each of n times. Merge and heap sorts.

-O(n^2): Quadratic. Grows proportionaly to the square of the size of the growth rate. Nested for loop.

-O(2^n): Exponential. Doubles with each addition of input size. Recursion.

-O(n!): I couldn't find any examples of this other than seeing it graphed as one of the largest growth rates.



5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: The most simple one to understand is O(n). The size of the line at the DMV determines how long it will take you to get through. Me doing Bloc assignments is probably O(n^2) because the larger the data set, takes me that much longer than the average Bloc student. :-). Auto repair may also be like O(n^2) because each addtional car is like another loop of trying to find the problem, with a nested loop of getting the parts to repair it.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: This is O(n) because in an array without the index being known, you need to loop through each element.

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: This is also O(n) because it is a single loop going through every element in an array.

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: This is O(2^n) because it is a recursive function, calling itself until the answer is reached.

9. Out of the code snippets you just saw, which is the most time efficient?

A: The most time efficient is the first one. Even though both the first and second are single loops with O(n) time complexity, the first one doesn't need to go through the entire loop to find the target in most cases.